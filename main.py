
import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

TOKEN = os.getenv("BOT_TOKEN", "").strip()
MANAGER_CHAT_ID = int(os.getenv("MANAGER_CHAT_ID", "0") or 0)
PDF_PATH = os.getenv("PDF_PATH", "assets/price.pdf")

bot = Bot(TOKEN, parse_mode="HTML")
dp = Dispatcher()

def kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–∞–π—Å (PDF)", callback_data="price")],
        [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="lead")],
    ])

@dp.message(CommandStart())
async def start(m: Message):
    payload = ""
    if m.text and " " in m.text:
        payload = m.text.split(" ", 1)[1].strip()
    src = payload or "direct"
    await m.answer(f"–ü—Ä–∏–≤–µ—Ç, {m.from_user.full_name}! –Ø –ø–æ–º–æ–≥—É —Å AI-–¥–∏–∑–∞–π–Ω–æ–º.\n–ò—Å—Ç–æ—á–Ω–∏–∫: <b>{src}</b>", reply_markup=kb())
    if MANAGER_CHAT_ID:
        await bot.send_message(MANAGER_CHAT_ID, f"üÜï @{m.from_user.username or '‚Äî'} ¬∑ {m.from_user.full_name} ¬∑ <code>{m.from_user.id}</code> ¬∑ src={src}")

@dp.message(Command("id"))
async def my_id(m: Message):
    await m.answer(f"–í–∞—à chat_id: <code>{m.from_user.id}</code>")

@dp.message(Command("price"))
async def price_cmd(m: Message):
    try:
        await m.answer_document(FSInputFile(PDF_PATH), caption="–ü—Ä–∞–π—Å –∏ –∫–µ–π—Å—ã (PDF)")
    except Exception:
        await m.answer("–ü—Ä–∞–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ PDF_PATH –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")

@dp.callback_query(F.data == "price")
async def cb_price(c):
    await c.answer()
    try:
        await c.message.answer_document(FSInputFile(PDF_PATH), caption="–ü—Ä–∞–π—Å –∏ –∫–µ–π—Å—ã (PDF)")
    except Exception:
        await c.message.answer("–ü—Ä–∞–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

@dp.callback_query(F.data == "lead")
async def cb_lead(c):
    await c.answer()
    await c.message.answer("–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É, –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–∏–ª—å –∏ —Å—Ä–æ–∫. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å 1‚Äì2 —Ñ–æ—Ç–æ.")

@dp.message(F.photo | F.text)
async def relay(m: Message):
    if not MANAGER_CHAT_ID:
        return
    await bot.send_message(MANAGER_CHAT_ID, f"‚úâÔ∏è @{m.from_user.username or '‚Äî'} ¬∑ {m.from_user.full_name} ¬∑ <code>{m.from_user.id}</code>")
    await m.forward(MANAGER_CHAT_ID)

async def main():
    assert TOKEN, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN"
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
